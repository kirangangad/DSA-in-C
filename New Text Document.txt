/*List comprehension*/
number_list = [ x for x in range(20) if x % 2 == 0]
print(number_list)

2)
h_letters = []

for letter in 'human':
    h_letters.append(letter)

print(h_letters)

3)
letters = list(map(lambda x: x, 'human'))
print(letters)

4)

number_list = [ x for x in range(20) if x % 2 == 0]
print(number_list)

5)
num_list = [y for y in range(100) if y % 2 == 0 if y % 5 == 0]
print(num_list)

6)

obj = ["Even" if i%2==0 else "Odd" for i in range(10)]
print(obj)

7)

transposed = []
matrix = [[1, 2, 3, 4], [4, 5, 6, 8]]

for i in range(len(matrix[0])):
    transposed_row = []

    for row in matrix:
        transposed_row.append(row[i])
    transposed.append(transposed_row)

print(transposed)

8)
fruits = ["apple", "banana", "cherry", "kiwi", "mango"]
newlist = [x for x in fruits if x != "apple"]
print(newlist)

//*************Iterators ***************************//
class MyNumbers:
  def __iter__(self):
    self.a = 1
    return self

  def __next__(self):
    x = self.a
    self.a += 1
    return x

myclass = MyNumbers()
myiter = iter(myclass)

print(next(myiter))
print(next(myiter))
print(next(myiter))
print(next(myiter))
print(next(myiter))


2)

class MyNumbers:
  def __iter__(self):
    self.a = 1
    return self

  def __next__(self):
    if self.a <= 20:
      x = self.a
      self.a += 1
      return x
    else:
      raise StopIteration

myclass = MyNumbers()
myiter = iter(myclass)

for x in myiter:
  print(x)


3)

my_list = [4, 7, 0, 3]

# get an iterator using iter()
my_iter = iter(my_list)

# iterate through it using next()

# Output: 4
print(next(my_iter))

# Output: 7
print(next(my_iter))

# next(obj) is same as obj.__next__()

# Output: 0
print(my_iter.__next__())

# Output: 3
print(my_iter.__next__())

# This will raise error, no items left
next(my_iter)
